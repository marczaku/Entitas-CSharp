//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TestContext {

    public TestEntity uniqueEventEntity { get { return GetGroup(TestMatcher.ContextComponentEvent).GetSingleEntity(); } }
    public ContextComponentEventComponent uniqueEvent { get { return uniqueEventEntity.uniqueEvent; } }
    public bool hasContextComponentEvent { get { return uniqueEventEntity != null; } }

    public TestEntity SetContextComponentEvent(string newValue) {
        if (hasContextComponentEvent) {
            throw new Entitas.EntitasException("Could not set ContextComponentEvent!\n" + this + " already has an entity with ContextComponentEventComponent!",
                "You should check if the context already has a uniqueEventEntity before setting it or use context.ReplaceContextComponentEvent().");
        }
        var entity = CreateEntity();
        entity.AddContextComponentEvent(newValue);
        return entity;
    }

    public void ReplaceContextComponentEvent(string newValue) {
        var entity = uniqueEventEntity;
        if (entity == null) {
            entity = SetContextComponentEvent(newValue);
        } else {
            entity.ReplaceContextComponentEvent(newValue);
        }
    }

    public void RemoveContextComponentEvent() {
        uniqueEventEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class TestEntity {

    public ContextComponentEventComponent uniqueEvent { get { return (ContextComponentEventComponent)GetComponent(TestComponentsLookup.ContextComponentEvent); } }
    public bool hasContextComponentEvent { get { return HasComponent(TestComponentsLookup.ContextComponentEvent); } }

    public void AddContextComponentEvent(string newValue) {
        var index = TestComponentsLookup.ContextComponentEvent;
        var component = (ContextComponentEventComponent)CreateComponent(index, typeof(ContextComponentEventComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceContextComponentEvent(string newValue) {
        var index = TestComponentsLookup.ContextComponentEvent;
        var component = (ContextComponentEventComponent)CreateComponent(index, typeof(ContextComponentEventComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveContextComponentEvent() {
        RemoveComponent(TestComponentsLookup.ContextComponentEvent);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class TestMatcher {

    static Entitas.IMatcher<TestEntity> _matcherContextComponentEvent;

    public static Entitas.IMatcher<TestEntity> ContextComponentEvent {
        get {
            if (_matcherContextComponentEvent == null) {
                var matcher = (Entitas.Matcher<TestEntity>)Entitas.Matcher<TestEntity>.AllOf(TestComponentsLookup.ContextComponentEvent);
                matcher.componentNames = TestComponentsLookup.componentNames;
                _matcherContextComponentEvent = matcher;
            }

            return _matcherContextComponentEvent;
        }
    }
}
